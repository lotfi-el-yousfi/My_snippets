{
  "99spring_basic_generator": {
    "prefix": "99spring_basic_generator",
    "body": [
      "// ========== ENTITY ==========",
      "package ${1:com.example.domain};",
      "",
      "import jakarta.persistence.*;",
      "",
      "@Entity",
      "public class ${2:EntityName} {",
      "  @Id",
      "  @GeneratedValue(strategy = GenerationType.IDENTITY)",
      "  private Long id;",
      "",
      "  private ${3:String} ${4:field};",
      "",
      "  // getters and setters",
      "}",
      "",
      "// ========== DTO ==========",
      "package ${1:com.example.dto};",
      "",
      "public class ${2}Dto {",
      "  private Long id;",
      "  private ${3} ${4};",
      "}",
      "",
      "// ========== REPOSITORY ==========",
      "package ${1:com.example.repository};",
      "",
      "import ${1}.domain.${2};",
      "import org.springframework.data.jpa.repository.JpaRepository;",
      "",
      "public interface ${2}Repository extends JpaRepository<${2}, Long> {}",
      "",
      "// ========== SERVICE ==========",
      "package ${1:com.example.service};",
      "",
      "import ${1}.domain.${2};",
      "import ${1}.dto.${2}Dto;",
      "import java.util.List;",
      "",
      "public interface ${2}Service {",
      "  List<${2}Dto> getAll();",
      "  ${2}Dto create(${2}Dto dto);",
      "}",
      "",
      "// ========== SERVICE IMPL ==========",
      "package ${1:com.example.service.impl};",
      "",
      "import ${1}.repository.${2}Repository;",
      "import ${1}.dto.${2}Dto;",
      "import ${1}.domain.${2};",
      "import ${1}.mapper.${2}Mapper;",
      "import org.springframework.stereotype.Service;",
      "import java.util.List;",
      "import java.util.stream.Collectors;",
      "",
      "@Service",
      "public class ${2}ServiceImpl implements ${2}Service {",
      "",
      "  private final ${2}Repository repo;",
      "  private final ${2}Mapper mapper;",
      "",
      "  public ${2}ServiceImpl(${2}Repository repo, ${2}Mapper mapper) {",
      "    this.repo = repo;",
      "    this.mapper = mapper;",
      "  }",
      "",
      "  @Override",
      "  public List<${2}Dto> getAll() {",
      "    return repo.findAll().stream().map(mapper::toDto).collect(Collectors.toList());",
      "  }",
      "",
      "  @Override",
      "  public ${2}Dto create(${2}Dto dto) {",
      "    ${2} entity = mapper.toEntity(dto);",
      "    return mapper.toDto(repo.save(entity));",
      "  }",
      "}",
      "",
      "// ========== CONTROLLER ==========",
      "package ${1:com.example.controller};",
      "",
      "import ${1}.service.${2}Service;",
      "import ${1}.dto.${2}Dto;",
      "import org.springframework.web.bind.annotation.*;",
      "import java.util.List;",
      "",
      "@RestController",
      "@RequestMapping(\"/api/${2.toLowerCase()}\")",
      "public class ${2}Controller {",
      "",
      "  private final ${2}Service service;",
      "",
      "  public ${2}Controller(${2}Service service) {",
      "    this.service = service;",
      "  }",
      "",
      "  @GetMapping",
      "  public List<${2}Dto> getAll() {",
      "    return service.getAll();",
      "  }",
      "",
      "  @PostMapping",
      "  public ${2}Dto create(@RequestBody ${2}Dto dto) {",
      "    return service.create(dto);",
      "  }",
      "}",
      "",
      "// ========== MAPPER (MapStruct) ==========",
      "package ${1:com.example.mapper};",
      "",
      "import org.mapstruct.Mapper;",
      "import ${1}.dto.${2}Dto;",
      "import ${1}.domain.${2};",
      "",
      "@Mapper(componentModel = \"spring\")",
      "public interface ${2}Mapper {",
      "  ${2}Dto toDto(${2} entity);",
      "  ${2} toEntity(${2}Dto dto);",
      "}"
    ],
    "description": "Generates full Spring Boot structure (Entity, DTO, Repo, Service, Controller, Mapper) with MapStruct support"
  },
  "webclient_inject": {
    "prefix": "webclient_inject",
    "body": [
      "private final WebClient webClient;",
      "public ${1:ClassName}(WebClient.Builder webClientBuilder) {",
      "    this.webClient = webClientBuilder",
      "        .baseUrl(\"${2:https://api.example.com}\")",
      "        .defaultHeader(\"Authorization\", \"Bearer ${3:your_token}\")",
      "        .filter(${4:filter/interceptor()})",
      "        .build();",
      "}"
    ],
    "description": "Inject WebClient in constructor"
  },
  "webclient_call_api": {
    "prefix": "webclient_call_api",
    "body": [
      "return webClient",
      ".${1|get,post,put,delete|}()",
      "    .uri(\"/${2:resource}/{id}\", ${3:id})",
      "    ${4:.bodyValue(${5:requestBody})}",
      "    .retrieve()",
      "    .onStatus(HttpStatus::is4xxClientError, response -> ${6:handle4xxError(response)})",
      "    .onStatus(HttpStatus::is5xxServerError, response -> ${7:handle5xxError(response)})",
      "    .bodyToMono(${8:YourResponseDto}.class)",
      "    .transform(doOnTerminateTimeMono(time -> log.debug(",
      "        \"Animco: ${9:http} ${10:url} in {}ms\", ${11:params}, time)));",
      "    .retryWhen(Retry.backoff(${12:3}, Duration.ofSeconds(${13:2})));"
    ],
    "description": "WebClient make call to another API"
  },
}